var p=Object.defineProperty;var m=Object.getOwnPropertyDescriptor;var k=Object.getOwnPropertyNames;var g=Object.prototype.hasOwnProperty;var v=(s,e)=>{for(var i in e)p(s,i,{get:e[i],enumerable:!0})},w=(s,e,i,n)=>{if(e&&typeof e=="object"||typeof e=="function")for(let t of k(e))!g.call(s,t)&&t!==i&&p(s,t,{get:()=>e[t],enumerable:!(n=m(e,t))||n.enumerable});return s};var f=s=>w(p({},"__esModule",{value:!0}),s);var u=(s,e,i)=>new Promise((n,t)=>{var d=r=>{try{l(i.next(r))}catch(a){t(a)}},h=r=>{try{l(i.throw(r))}catch(a){t(a)}},l=r=>r.done?n(r.value):Promise.resolve(r.value).then(d,h);l((i=i.apply(s,e)).next())});var L={};v(L,{default:()=>o});module.exports=f(L);var c=require("obsidian");var o=class extends c.Plugin{constructor(){super(...arguments);this.timer=null;this.isEditing=!1;this.clickListener=null}onload(){return u(this,null,function*(){console.log("Loading Auto Toggle Mode plugin"),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.setupClickListener()})),this.setupClickListener()})}onunload(){return u(this,null,function*(){console.log("Unloading Auto Toggle Mode plugin"),this.clickListener&&document.removeEventListener("click",this.clickListener),this.timer&&clearTimeout(this.timer)})}setupClickListener(){this.clickListener&&document.removeEventListener("click",this.clickListener),this.clickListener=i=>{this.handleDocumentClick(i)},document.addEventListener("click",this.clickListener)}handleDocumentClick(i){let n=this.app.workspace.getActiveViewOfType(c.MarkdownView);n&&n.getViewType()==="markdown"&&!this.isEditing&&(n.leaf.setViewState({type:"markdown",state:{mode:"source"}}),this.isEditing=!0,this.timer&&clearTimeout(this.timer),this.timer=setTimeout(()=>{if(this.isEditing){let t=this.app.workspace.getActiveViewOfType(c.MarkdownView);t&&t.getViewType()==="markdown"&&(t.leaf.setViewState({type:"markdown",state:{mode:"preview"}}),this.isEditing=!1)}},1e4))}};0&&(module.exports={});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL21haW4udHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiwgTWFya2Rvd25WaWV3LCBXb3Jrc3BhY2VMZWFmIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBBdXRvVG9nZ2xlTW9kZVBsdWdpbiBleHRlbmRzIFBsdWdpbiB7XG4gICAgcHJpdmF0ZSB0aW1lcjogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIGlzRWRpdGluZyA9IGZhbHNlO1xuICAgIHByaXZhdGUgY2xpY2tMaXN0ZW5lcjogRXZlbnRMaXN0ZW5lciB8IG51bGwgPSBudWxsO1xuXG4gICAgYXN5bmMgb25sb2FkKCkge1xuICAgICAgICBjb25zb2xlLmxvZygnTG9hZGluZyBBdXRvIFRvZ2dsZSBNb2RlIHBsdWdpbicpO1xuICAgICAgICBcbiAgICAgICAgLy8gUmVnaXN0ZXIgZXZlbnQgdG8gaGFuZGxlIGxheW91dCBjaGFuZ2VzXG4gICAgICAgIHRoaXMucmVnaXN0ZXJFdmVudChcbiAgICAgICAgICAgIHRoaXMuYXBwLndvcmtzcGFjZS5vbignbGF5b3V0LWNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHVwQ2xpY2tMaXN0ZW5lcigpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEluaXRpYWwgc2V0dXBcbiAgICAgICAgdGhpcy5zZXR1cENsaWNrTGlzdGVuZXIoKTtcbiAgICB9XG5cbiAgICBhc3luYyBvbnVubG9hZCgpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ1VubG9hZGluZyBBdXRvIFRvZ2dsZSBNb2RlIHBsdWdpbicpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYW4gdXAgZXZlbnQgbGlzdGVuZXJzXG4gICAgICAgIGlmICh0aGlzLmNsaWNrTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0xpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ2xlYXIgdGltZXIgaWYgYWN0aXZlXG4gICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHNldHVwQ2xpY2tMaXN0ZW5lcigpIHtcbiAgICAgICAgLy8gUmVtb3ZlIGV4aXN0aW5nIGxpc3RlbmVyIGlmIGFueVxuICAgICAgICBpZiAodGhpcy5jbGlja0xpc3RlbmVyKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuY2xpY2tMaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBjbGljayBsaXN0ZW5lciB0byB0aGUgZG9jdW1lbnRcbiAgICAgICAgdGhpcy5jbGlja0xpc3RlbmVyID0gKGU6IE1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljayhlKTtcbiAgICAgICAgfTtcbiAgICAgICAgXG4gICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5jbGlja0xpc3RlbmVyKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZURvY3VtZW50Q2xpY2soZTogTW91c2VFdmVudCkge1xuICAgICAgICAvLyBHZXQgdGhlIGN1cnJlbnQgdmlld1xuICAgICAgICBjb25zdCB2aWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghdmlldykgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgd2UncmUgaW4gcmVhZGluZyBtb2RlIChwcmV2aWV3IG1vZGUpXG4gICAgICAgIGlmICh2aWV3LmdldFZpZXdUeXBlKCkgPT09ICdtYXJrZG93bicgJiYgIXRoaXMuaXNFZGl0aW5nKSB7XG4gICAgICAgICAgICAvLyBTd2l0Y2ggdG8gZWRpdGluZyBtb2RlXG4gICAgICAgICAgICB2aWV3LmxlYWYuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgIHN0YXRlOiB7IG1vZGU6ICdzb3VyY2UnIH0gLy8gb3IgJ2xpdmUnIGZvciBsaXZlIHByZXZpZXdcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5pc0VkaXRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGVhciBhbnkgZXhpc3RpbmcgdGltZXJcbiAgICAgICAgICAgIGlmICh0aGlzLnRpbWVyKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTZXQgdGltZXIgdG8gc3dpdGNoIGJhY2sgdG8gcmVhZGluZyBtb2RlIGFmdGVyIDEwIHNlY29uZHNcbiAgICAgICAgICAgIHRoaXMudGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHN3aXRjaCBiYWNrIGlmIHdlJ3JlIHN0aWxsIGluIGVkaXRpbmcgbW9kZVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRWRpdGluZykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50VmlldyAmJiBjdXJyZW50Vmlldy5nZXRWaWV3VHlwZSgpID09PSAnbWFya2Rvd24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTd2l0Y2ggYmFjayB0byByZWFkaW5nIG1vZGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWaWV3LmxlYWYuc2V0Vmlld1N0YXRlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2Rvd24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiB7IG1vZGU6ICdwcmV2aWV3JyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFZGl0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCAxMDAwMCk7IC8vIDEwIHNlY29uZHNcbiAgICAgICAgfVxuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAieW1CQUFBLElBQUFBLEVBQUEsR0FBQUMsRUFBQUQsRUFBQSxhQUFBRSxJQUFBLGVBQUFDLEVBQUFILEdBQUEsSUFBQUksRUFBb0Qsb0JBRXBELElBQXFCQyxFQUFyQixjQUFrRCxRQUFPLENBQXpELGtDQUNJLEtBQVEsTUFBK0IsS0FDdkMsS0FBUSxVQUFZLEdBQ3BCLEtBQVEsY0FBc0MsS0FFeEMsUUFBUyxRQUFBQyxFQUFBLHNCQUNYLFFBQVEsSUFBSSxpQ0FBaUMsRUFHN0MsS0FBSyxjQUNELEtBQUssSUFBSSxVQUFVLEdBQUcsZ0JBQWlCLElBQU0sQ0FDekMsS0FBSyxtQkFBbUIsQ0FDNUIsQ0FBQyxDQUNMLEVBR0EsS0FBSyxtQkFBbUIsQ0FDNUIsR0FFTSxVQUFXLFFBQUFBLEVBQUEsc0JBQ2IsUUFBUSxJQUFJLG1DQUFtQyxFQUczQyxLQUFLLGVBQ0wsU0FBUyxvQkFBb0IsUUFBUyxLQUFLLGFBQWEsRUFJeEQsS0FBSyxPQUNMLGFBQWEsS0FBSyxLQUFLLENBRS9CLEdBRVEsb0JBQXFCLENBRXJCLEtBQUssZUFDTCxTQUFTLG9CQUFvQixRQUFTLEtBQUssYUFBYSxFQUk1RCxLQUFLLGNBQWlCQyxHQUFrQixDQUNwQyxLQUFLLG9CQUFvQkEsQ0FBQyxDQUM5QixFQUVBLFNBQVMsaUJBQWlCLFFBQVMsS0FBSyxhQUFhLENBQ3pELENBRVEsb0JBQW9CQSxFQUFlLENBRXZDLElBQU1DLEVBQU8sS0FBSyxJQUFJLFVBQVUsb0JBQW9CLGNBQVksRUFFM0RBLEdBR0RBLEVBQUssWUFBWSxJQUFNLFlBQWMsQ0FBQyxLQUFLLFlBRTNDQSxFQUFLLEtBQUssYUFBYSxDQUNuQixLQUFNLFdBQ04sTUFBTyxDQUFFLEtBQU0sUUFBUyxDQUM1QixDQUFDLEVBQ0QsS0FBSyxVQUFZLEdBR2IsS0FBSyxPQUNMLGFBQWEsS0FBSyxLQUFLLEVBSTNCLEtBQUssTUFBUSxXQUFXLElBQU0sQ0FFMUIsR0FBSSxLQUFLLFVBQVcsQ0FDaEIsSUFBTUMsRUFBYyxLQUFLLElBQUksVUFBVSxvQkFBb0IsY0FBWSxFQUNuRUEsR0FBZUEsRUFBWSxZQUFZLElBQU0sYUFFN0NBLEVBQVksS0FBSyxhQUFhLENBQzFCLEtBQU0sV0FDTixNQUFPLENBQUUsS0FBTSxTQUFVLENBQzdCLENBQUMsRUFDRCxLQUFLLFVBQVksR0FFekIsQ0FDSixFQUFHLEdBQUssRUFFaEIsQ0FDSiIsCiAgIm5hbWVzIjogWyJtYWluX2V4cG9ydHMiLCAiX19leHBvcnQiLCAiQXV0b1RvZ2dsZU1vZGVQbHVnaW4iLCAiX190b0NvbW1vbkpTIiwgImltcG9ydF9vYnNpZGlhbiIsICJBdXRvVG9nZ2xlTW9kZVBsdWdpbiIsICJfX2FzeW5jIiwgImUiLCAidmlldyIsICJjdXJyZW50VmlldyJdCn0K
