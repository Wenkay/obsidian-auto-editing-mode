var p=Object.defineProperty;var w=Object.getOwnPropertyDescriptor;var L=Object.getOwnPropertyNames;var y=Object.prototype.hasOwnProperty;var T=(n,s)=>{for(var t in s)p(n,t,{get:s[t],enumerable:!0})},k=(n,s,t,e)=>{if(s&&typeof s=="object"||typeof s=="function")for(let i of L(s))!y.call(n,i)&&i!==t&&p(n,i,{get:()=>s[i],enumerable:!(e=w(s,i))||e.enumerable});return n};var f=n=>k(p({},"__esModule",{value:!0}),n);var l=(n,s,t)=>new Promise((e,i)=>{var o=a=>{try{m(t.next(a))}catch(h){i(h)}},c=a=>{try{m(t.throw(a))}catch(h){i(h)}},m=a=>a.done?e(a.value):Promise.resolve(a.value).then(o,c);m((t=t.apply(n,s)).next())});var b={};T(b,{default:()=>g});module.exports=f(b);var r=require("obsidian");var d=require("obsidian");var v={timeoutDuration:1e4},u=class extends d.PluginSettingTab{constructor(t,e){super(t,e);this.plugin=e}display(){let{containerEl:t}=this;t.empty(),t.createEl("h2",{text:"Auto Toggle Mode Settings"}),new d.Setting(t).setName("Timeout duration").setDesc("Time in seconds before switching back to reading mode after window is minimized").addSlider(e=>e.setLimits(1,60,1).setValue(this.plugin.settings.timeoutDuration/1e3).setDynamicTooltip().onChange(i=>l(this,null,function*(){this.plugin.settings.timeoutDuration=i*1e3,yield this.plugin.saveSettings()})))}};var g=class extends r.Plugin{constructor(){super(...arguments);this.clickListener=null;this.visibilityListener=null;this.timer=null;this.lastClickTime=0;this.clickDelay=300}onload(){return l(this,null,function*(){console.log("Loading Auto Toggle Mode plugin"),yield this.loadSettings(),this.addSettingTab(new u(this.app,this)),this.registerEvent(this.app.workspace.on("layout-change",()=>{this.setupClickListener(),this.setupVisibilityListener()})),this.setupClickListener(),this.setupVisibilityListener()})}onunload(){return l(this,null,function*(){console.log("Unloading Auto Toggle Mode plugin"),this.clickListener&&document.removeEventListener("click",this.clickListener),this.visibilityListener&&document.removeEventListener("visibilitychange",this.visibilityListener),this.timer&&clearTimeout(this.timer)})}loadSettings(){return l(this,null,function*(){this.settings=Object.assign({},v,yield this.loadData())})}saveSettings(){return l(this,null,function*(){yield this.saveData(this.settings)})}setupClickListener(){this.clickListener&&document.removeEventListener("click",this.clickListener),this.clickListener=t=>{this.handleDocumentClick(t)},document.addEventListener("click",this.clickListener)}setupVisibilityListener(){this.visibilityListener&&document.removeEventListener("visibilitychange",this.visibilityListener),this.visibilityListener=()=>{this.handleVisibilityChange()},document.addEventListener("visibilitychange",this.visibilityListener)}isModeToggleControl(t){let e=t;for(;e;){if(e.classList&&e.getAttribute("aria-label")){let i=e.getAttribute("aria-label");if(i&&(i.includes("mode")||i.includes("\u6A21\u5F0F")||i.includes("Edit")||i.includes("\u7F16\u8F91")||i.includes("Preview")||i.includes("\u9884\u89C8")))return!0}if(e.classList&&e.classList.contains("view-action")||e.classList&&e.classList.contains("nav-action-button")||e.classList&&e.classList.contains("clickable-icon"))return!0;if(e=e.parentElement,e&&e.closest&&e.closest(".workspace-split"))break}return!1}handleDocumentClick(t){let e=Date.now();if(e-this.lastClickTime<this.clickDelay)return;this.lastClickTime=e;let i=t.target;if(this.isModeToggleControl(i)){console.log("Clicked on mode toggle control, allowing Obsidian to handle it");return}let o=this.app.workspace.getActiveViewOfType(r.MarkdownView);if(!o)return;let c=o.getState();o.getViewType()==="markdown"&&c.mode!=="source"?(console.log("Switching from reading mode to editing mode"),o.leaf.setViewState({type:"markdown",state:{mode:"source"}})):o.getViewType()==="markdown"&&c.mode==="source"&&console.log("Already in editing mode, not interfering with user actions")}handleVisibilityChange(){let t=this.app.workspace.getActiveViewOfType(r.MarkdownView);document.hidden&&t&&t.getViewType()==="markdown"&&t.getState().mode==="source"?(this.timer&&clearTimeout(this.timer),this.timer=setTimeout(()=>{let e=this.app.workspace.getActiveViewOfType(r.MarkdownView);e&&e.getViewType()==="markdown"&&e.getState().mode==="source"&&(console.log("Switching back to reading mode after window minimization timeout"),e.leaf.setViewState({type:"markdown",state:{mode:"preview"}})),this.timer=null},this.settings.timeoutDuration)):!document.hidden&&this.timer&&(clearTimeout(this.timer),this.timer=null)}};0&&(module.exports={});
//# sourceMappingURL=data:application/json;base64,
